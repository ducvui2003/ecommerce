// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd/ERD.pdf"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "awesome.dbml"
  projectName         = "An Nhien E-commerce"
  projectDatabaseType = "PostgreSQL"
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AvailableStatus {
  ACTIVE
  INACTIVE

  @@map("available_status")
}

enum CustomerStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERING
  CANCELED
  COMPLETE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum PaymentProvider {
  VNPAY
  SEPAY
}

/**
 * - Role 1 - M User
 * - User 1 - M Address
 * - User 1 - 1 Cart
 * - User 1 - M Order
 * - User 1 - M Review
 * - User 1 - M Wishlist
 * - User 1 - M Comment
 * ----------------------
 * - Supplier 1 - 1 Address
 * - Supplier 1 - M Product
 * ----------------------
 * - Product 1 - M Image
 * - Product 1 - M CartItem
 * - Product 1 - M OrderItem
 * - Product 1 - M Review
 * - Product 1 - M Comment
 * -----------------------
 * - Category 1 - M Product
 * -----------------------
 * - Cart 1 - 1 User
 * - Cart 1 - M CartItem
 * - CartItem M - 1 Product
 * -----------------------
 * - Order 1 - M OrderItem
 * - Order M - 1 User
 * - OrderItem M - 1 Product
 * ------------------------
 * // Mã giảm giá áp dụng cho 1 đơn hàng hoặc cho từng sản phẩm trong đơn hàng
 * // Có thể áp dụng cả 2 trong 1 đơn hàng
 * - Promotion 1 - M PromotionOrder
 * - Promotion 1 - M PromotionOrderItem
 * ------------------------
 * - Review M - 1 User
 * - Review M - 1 Product
 * ------------------------
 * - Wishlist M - 1 User
 * - Wishlist M - 1 Product
 * ------------------------
 * - Comment M - 1 User
 * - Comment M - 1 Product
 */
model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?    @default("")
  password String     @db.VarChar(255)
  phone    String?    @default("")
  avatar   String?    @default("")
  status   UserStatus @default(INACTIVE)
  dob      DateTime?  @db.Date

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  addresses Address[]
  cart      Cart?
  order     Order[]
  review    Review[]
  wishlist  Wishlist[]
  comment   Comment[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("roles")
}

model Address {
  id       Int    @id @default(autoincrement())
  detail   String
  ward     String
  district String
  province String

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  supplier Supplier?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("addresses")
}

model Supplier {
  id      Int             @id @default(autoincrement())
  name    String
  email   String
  phone   String
  country String
  website String
  status  AvailableStatus @default(INACTIVE)

  product Product[]

  addressId Int     @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("suppliers")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  basePrice   Decimal  @map("base_price") @db.Decimal(10, 2)
  salePrice   Decimal? @map("sale_price") @db.Decimal(10, 2)
  views       Int      @default(0)

  categoryId  Int        @map("category_id")
  category    Category   @relation(fields: [categoryId], references: [id])
  supplierId  Int        @map("supplier_id")
  supplier    Supplier   @relation(fields: [supplierId], references: [id])
  thumbnailId Int?       @map("thumbnail_id")
  thumbnail   Resource?  @relation(fields: [thumbnailId], references: [id])
  cartItem    CartItem[]
  review      Review[]
  wishlist    Wishlist[]
  comment     Comment[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  isDeleted Boolean?  @default(false) @map("is_deleted")

  productResource ProductResource[]
  option          Option[]

  @@map("products")
}

model Option {
  id Int @id @default(autoincrement())

  name  String
  price Decimal @map("price") @db.Decimal(10, 2)
  stock Int?    @default(0)

  productId  Int       @map("product_id")
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  resourceId Int?      @map("resource_id")
  resource   Resource? @relation(fields: [resourceId], references: [id])

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  CartItem  CartItem[]

  @@map("options")
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String
  status AvailableStatus @default(INACTIVE)

  product Product[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("categories")
}

model Resource {
  id       Int    @id @default(autoincrement())
  publicId String @map("public_id")
  type     String
  format   String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isDeleted Boolean   @default(false)

  productResource ProductResource[]
  option          Option[]
  Product         Product[]

  @@map("resources")
}

model ProductResource {
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int      @map("resource_id")

  createdAt DateTime @default(now()) @map("created_at")

  @@id([productId, resourceId]) // Composite primary key
  @@map("product_resources") // Rename table in the DB
}

model Cart {
  id Int @id @default(autoincrement())

  userId    Int        @unique @map("user_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[] @relation(name: "CartToCartItem")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("carts")
}

model CartItem {
  id        String    @id @default(uuid())
  productId Int       @map("product_id")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  selected  Boolean   @default(true) @map("selected")
  quantity  Int       @default(1)
  optionId  Int?      @map("option_id")
  option    Option?   @relation(fields: [optionId], references: [id])
  cartId    Int       @map("cart_id")
  cart      Cart      @relation(fields: [cartId], references: [id], name: "CartToCartItem")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([cartId, productId, optionId])
  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Decimal     @map("total_amount") @db.Decimal(10, 2)
  feeShipping Decimal     @map("fee_shipping") @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)

  /// [Receiver]
  receiver Json
  userId   Int  @map("user_id")
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderItem      OrderItem[]
  promotionOrder PromotionOrder[]

  createdAt DateTime @default(now()) @map("created_at")
  payment   Payment?

  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  price    Decimal

  orderId Int   @map("order_id")
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  /// [ProductOrderItem]
  product Json

  createdAt          DateTime             @default(now()) @map("created_at")
  promotionOrderItem PromotionOrderItem[]
  Review             Review[]

  @@map("order_items")
}

model Payment {
  id        Int             @id @default(autoincrement())
  orderId   Int?            @unique @map("order_id")
  order     Order?          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status    PaymentStatus
  provider  PaymentProvider
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime?       @updatedAt @map("updated_at")

  @@map("payment")
}

model PaymentTransaction {
  id                Int     @id @default(autoincrement())
  paymentId         Int?    @map("payment_id")
  providerPaymentId String  @map("provider_payment_id")
  amount            Decimal @db.Decimal(20, 2)

  /// [PaymentTransactionPayload]
  payload   Json
  createdAt DateTime @default(now()) @map("created_at")

  @@map("payment_transaction")
}

model Promotion {
  id          Int             @id @default(autoincrement())
  code        String          @unique
  description String
  percent     Decimal         @map("percent")
  maxAmount   Decimal         @map("map_amount")
  startDate   DateTime        @map("start_date")
  endDate     DateTime        @map("end_date")
  usageLimit  Int             @map("usage_limit")
  status      AvailableStatus @default(ACTIVE)

  promotionOrder     PromotionOrder[]
  promotionOrderItem PromotionOrderItem[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("promotions")
}

model PromotionOrder {
  id Int @id @default(autoincrement())

  promotionId Int       @map("promotion_id")
  Promotion   Promotion @relation(fields: [promotionId], references: [id])
  orderId     Int       @map("order_id")
  Order       Order     @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("promotion_orders")
}

model PromotionOrderItem {
  id Int @id @default(autoincrement())

  promotionId Int       @map("promotion_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  orderItemId Int       @map("order_item_id")
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("promotion_order_items")
}

model Review {
  id      Int    @id @default(autoincrement())
  content String
  rating  Int

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItemId Int       @map("order_item_id")
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  response String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([orderItemId, userId])
  @@map("reviews")
}

model Wishlist {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, productId])
  @@map("wishlists")
}

model Contact {
  id      Int            @id @default(autoincrement())
  title   String
  email   String
  phone   String
  name    String
  message String
  status  CustomerStatus @default(PENDING)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("contacts")
}

model Notification {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("notifications")
}

model Comment {
  id       String  @id @default(uuid())
  content  String
  like     Int
  parentId String? @map("parent_id")

  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("comments")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Policy {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("policies")
}

model About {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("abouts")
}

model Faq {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("faqs")
}
