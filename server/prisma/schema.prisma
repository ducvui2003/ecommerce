// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum BaseStatus {
  ACTIVE
  INACTIVE
}

enum CSStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERING
  DELIVERED
  CANCELED
  COMPLETE
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  fullname     String
  name         String         @default("")
  password     String
  refreshToken RefreshToken[]
  phone        String         @default("")
  avatar       String         @default("")
  status       UserStatus     @default(INACTIVE)
  roleId       Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
  deletedAt    DateTime?
  Role         Role           @relation(fields: [roleId], references: [id])
  Addresses    Address[]
  Cart         Cart?
  Order        Order[]
  Review       Review[]
  Wishlist     Wishlist[]
  Comment      Comment[]

  @@map("users")
}

model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  user      User[]

  @@map("roles")
}

model RefreshToken {
  token     String   @id
  expiredAt DateTime
  userId    Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("refresh_tokens")
}

model VerificationCode {
  id          Int              @id @default(autoincrement())
  email       String           @unique
  type        VerificationType
  code        String
  expired_int DateTime

  createdAt DateTime @default(now())

  @@index([id, email, type])
  @@map("verification_codes")
}

enum VerificationType {
  REGISTER
  FORGOT_PASSWORD
}

model Address {
  id          Int       @id @default(autoincrement())
  addressLine String
  ward        String
  district    String
  province    String
  city        String
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplier    Supplier?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("addresses")
}

model Supplier {
  id            Int        @id @default(autoincrement())
  name          String
  contact_email String
  contact_phone String
  addressId     Int        @unique
  country       String
  website       String
  status        BaseStatus @default(INACTIVE)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?
  address       Address    @relation(fields: [addressId], references: [id], onDelete: Cascade)
  Product       Product[]

  @@map("suppliers")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  stock       Int
  categoryID  Int
  supplierID  Int
  Image       Image[]
  category    Category    @relation(fields: [categoryID], references: [id])
  supplier    Supplier    @relation(fields: [supplierID], references: [id])
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  deleted_at  DateTime?
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  Review      Review[]
  Wishlist    Wishlist[]
  Comment     Comment[]

  @@map("products")
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String
  status     BaseStatus @default(INACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  product    Product[]

  @@map("categories")
}

model Image {
  id         Int       @id @default(autoincrement())
  image_url  String
  product_id Int
  product    Product   @relation(fields: [product_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("images")
}

model Cart {
  id         Int        @id @default(autoincrement())
  user_id    Int        @unique
  quantity   Int        @default(0)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  cartItems  CartItem[] @relation(name: "CartToCartItem")

  @@map("carts")
}

model CartItem {
  id         String @id @default(uuid()) // char(36)
  product_id Int
  cart_id    Int

  quantity   Int       @default(1)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  cart    Cart    @relation(fields: [cart_id], references: [id], name: "CartToCartItem")
  product Product @relation(fields: [product_id], references: [id])

  @@map("cart_items")
}

model Order {
  id             Int              @id @default(autoincrement())
  user_id        Int
  total_amount   Decimal
  status         OrderStatus      @default(PENDING)
  payment        String
  address_id     Int
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  OrderItem      OrderItem[]
  PromotionOrder PromotionOrder[]

  @@map("orders")
}

model OrderItem {
  id         BigInt  @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal
  Order      Order   @relation(fields: [order_id], references: [id])
  Product    Product @relation(fields: [product_id], references: [id])

  @@map("oder_items")
}

model Promotion {
  id                  Int                  @id @default(autoincrement())
  code                String               @unique
  description         String
  discount_percent    Decimal
  max_discount_amount Decimal
  start_date          DateTime
  end_date            DateTime
  usage_limit         Int
  status              BaseStatus           @default(ACTIVE)
  PromotionOrder      PromotionOrder[]
  PromotionOrderItem  PromotionOrderItem[]

  @@map("promotions")
}

model PromotionOrder {
  id                   Int       @id @default(autoincrement())
  promotion_id         Int
  order_id             Int
  Promotion            Promotion @relation(fields: [promotion_id], references: [id])
  Order                Order     @relation(fields: [order_id], references: [id])
  promotionOrderItemId Int?

  @@map("promotion_orders")
}

model PromotionOrderItem {
  id            Int       @id @default(autoincrement())
  promotion_id  Int
  order_item_id Int
  Promotion     Promotion @relation(fields: [promotion_id], references: [id])

  @@map("promotion_order_items")
}

model Review {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  content    String
  rating     Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user       User      @relation(fields: [user_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id])

  @@map("reviews")
}

model Wishlist {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user       User      @relation(fields: [user_id], references: [id])
  product    Product   @relation(fields: [product_id], references: [id])

  @@map("wishlists")
}

model CustomerService {
  id         Int       @id @default(autoincrement())
  title      String
  email      String
  message    String
  status     CSStatus  @default(PENDING)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("customer_services")
}

model Notification {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  status     BaseStatus @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("notifications")
}

model Comment {
  id                Int       @id @default(autoincrement())
  user_id           Int
  product_id        Int
  content           String
  like              Int
  comment_parent_id Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted_at        DateTime?
  user              User      @relation(fields: [user_id], references: [id])
  product           Product   @relation(fields: [product_id], references: [id])

  @@map("comments")
}

model Policy {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  status     BaseStatus @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("policies")
}

model About {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  status     BaseStatus @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("abouts")
}

model Faq {
  id         Int        @id @default(autoincrement())
  title      String
  content    String
  status     BaseStatus @default(ACTIVE)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("faqs")
}

// npx prisma db push
