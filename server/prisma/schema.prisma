// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma db push

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum AvailableStatus {
  ACTIVE
  INACTIVE

  @@map("available_status")
}

enum CustomerStatus {
  PENDING
  RESOLVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  DELIVERING
  DELIVERED
  CANCELED
  COMPLETE
}

/**
 * - Role 1 - M User
 * - User 1 - M Address
 * - User 1 - 1 Cart
 * - User 1 - M Order
 * - User 1 - M Review
 * - User 1 - M Wishlist
 * - User 1 - M Comment
 * ----------------------
 * - Supplier 1 - 1 Address
 * - Supplier 1 - M Product
 * ----------------------
 * - Product 1 - M Image
 * - Product 1 - M CartItem
 * - Product 1 - M OrderItem
 * - Product 1 - M Review
 * - Product 1 - M Comment
 * -----------------------
 * - Category 1 - M Product
 * -----------------------
 * - Cart 1 - 1 User
 * - Cart 1 - M CartItem
 * - CartItem M - 1 Product
 * -----------------------
 * - Order 1 - M OrderItem
 * - Order M - 1 User
 * - OrderItem M - 1 Product
 * ------------------------
 * // Mã giảm giá áp dụng cho 1 đơn hàng hoặc cho từng sản phẩm trong đơn hàng
 * // Có thể áp dụng cả 2 trong 1 đơn hàng
 * - Promotion 1 - M PromotionOrder
 * - Promotion 1 - M PromotionOrderItem
 * ------------------------
 * - Review M - 1 User
 * - Review M - 1 Product
 * ------------------------
 * - Wishlist M - 1 User
 * - Wishlist M - 1 Product
 * ------------------------
 * - Comment M - 1 User
 * - Comment M - 1 Product
 */
model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?    @default("")
  password String     @db.VarChar(255)
  phone    String?    @default("")
  avatar   String?    @default("")
  status   UserStatus @default(INACTIVE)
  dob      DateTime?  @db.Date

  roleId Int  @map("role_id")
  Role   Role @relation(fields: [roleId], references: [id])

  Addresses Address[]
  Cart      Cart?
  Order     Order[]
  Review    Review[]
  Wishlist  Wishlist[]
  Comment   Comment[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("roles")
}

model Address {
  id       Int    @id @default(autoincrement())
  detail   String
  ward     String
  district String
  province String

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  supplier Supplier?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("addresses")
}

model Supplier {
  id      Int             @id @default(autoincrement())
  name    String
  email   String
  phone   String
  country String
  website String
  status  AvailableStatus @default(INACTIVE)

  Product Product[]

  addressId Int     @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("suppliers")
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  basePrice   BigInt
  salePrice   BigInt

  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  supplierId Int      @map("supplier_id")
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  CartItem  CartItem[]
  OrderItem OrderItem[]
  Review    Review[]
  Wishlist  Wishlist[]
  Comment   Comment[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  ProductResource ProductResource[]

  @@map("products")
}

model Volume {
  id    Int     @id @default(autoincrement())
  name  String
  value Decimal
  unit  String

  option Option[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("volumns")
}

model Option {
  id   Int    @id @default(autoincrement())
  name String

  volumeId       Int
  Volume         Volume           @relation(fields: [volumeId], references: [id])
  price          BigInt
  stock          Int?             @default(0)
  OptionResource OptionResource[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("options")
}

model Category {
  id     Int             @id @default(autoincrement())
  name   String
  status AvailableStatus @default(INACTIVE)

  product Product[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("categories")
}

model Resource {
  id  Int    @id @default(autoincrement())
  url String @map("url")

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  productId       Int?
  ProductResource ProductResource[]
  OptionResource  OptionResource[]

  @@map("resources")
}

model ProductResource {
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId Int

  // Optional: custom metadata fields
  createdAt DateTime @default(now())

  @@id([productId, resourceId]) // Composite primary key
  @@map("product_resources") // Rename table in the DB
}

model OptionResource {
  id         Int      @id
  option     Option   @relation(fields: [id], references: [id], onDelete: Cascade)
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@map("option_resources") // Rename t
}

model Cart {
  id       Int @id @default(autoincrement())
  quantity Int @default(0)

  userId    Int        @unique @map("user_id")
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[] @relation(name: "CartToCartItem")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("carts")
}

model CartItem {
  id String @id @default(uuid()) // char(36)

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  cartId Int  @map("cart_id")
  cart   Cart @relation(fields: [cartId], references: [id], name: "CartToCartItem")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("cart_items")
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Decimal     @map("total_amount")
  feeShipping Decimal     @map("fee_shipping")
  status      OrderStatus @default(PENDING)
  payment     String

  // Address
  detail   String
  ward     String
  district String
  province String

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  OrderItem      OrderItem[]
  PromotionOrder PromotionOrder[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  price    Decimal

  orderId   Int     @map("order_id")
  Order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  Product   Product @relation(fields: [productId], references: [id])

  createdAt          DateTime             @default(now()) @map("created_at")
  PromotionOrderItem PromotionOrderItem[]

  @@map("order_items")
}

model Promotion {
  id          Int             @id @default(autoincrement())
  code        String          @unique
  description String
  percent     Decimal         @map("percent")
  maxAmount   Decimal         @map("map_amount")
  startDate   DateTime        @map("start_date")
  endDate     DateTime        @map("end_date")
  usageLimit  Int             @map("usage_limit")
  status      AvailableStatus @default(ACTIVE)

  PromotionOrder     PromotionOrder[]
  PromotionOrderItem PromotionOrderItem[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("promotions")
}

model PromotionOrder {
  id Int @id @default(autoincrement())

  promotionId Int       @map("promotion_id")
  Promotion   Promotion @relation(fields: [promotionId], references: [id])
  orderId     Int       @map("order_id")
  Order       Order     @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("promotion_orders")
}

model PromotionOrderItem {
  id Int @id @default(autoincrement())

  promotionId Int       @map("promotion_id")
  Promotion   Promotion @relation(fields: [promotionId], references: [id])
  orderItemId Int       @map("order_item_id")
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("promotion_order_items")
}

model Review {
  id      Int    @id @default(autoincrement())
  content String
  rating  Int

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("reviews")
}

model Wishlist {
  id Int @id @default(autoincrement())

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("wishlists")
}

model CustomerService {
  id      Int            @id @default(autoincrement())
  title   String
  email   String
  message String
  status  CustomerStatus @default(PENDING)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("customer_services")
}

model Notification {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("notifications")
}

model Comment {
  id       Int    @id @default(autoincrement())
  content  String
  like     Int
  parentId Int?   @map("parent_id")

  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("comments")
}

model Policy {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("policies")
}

model About {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("abouts")
}

model Faq {
  id      Int             @id @default(autoincrement())
  title   String
  content String
  status  AvailableStatus @default(ACTIVE)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("faqs")
}
