events {
    worker_connections 1024;
}

http {
  # Docker DNS resolver
  resolver 127.0.0.11 valid=30s;
   ## HTTP - Redirect to HTTPS
  server {
    listen 80;
    server_name localhost;  # Use your actual domain here

    location /.well-known/acme-challenge/ {
      root /var/www/certbot;
    }

    location /test {
      return 200 'HTTP is working';
      add_header Content-Type text/plain;
    }

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    server_name localhost; 

    ssl_certificate /etc/nginx/certs/localhost.crt;
    ssl_certificate_key /etc/nginx/certs/localhost.key;

    location / {
      proxy_pass http://ecommerce-fe:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }


    location /be/ {
      rewrite ^/be/?(.*)$ /$1 break;
      proxy_pass http://ecommerce-be:8000/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # Optional, useful for websockets if you have any
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    location /socket.io/ {
      proxy_pass http://ecommerce-be:8000/socket.io/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

  }
  

}